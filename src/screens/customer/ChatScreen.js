import { View, ActivityIndicator, Text, KeyboardAvoidingView, TouchableOpacity, Platform } from 'react-native';
import styles from '../../styles/ChatStyles';
import ChatHeader from '@components/chat/ChatHeader';
import ChatMessages from '@components/chat/ChatMessages';
import ChatInput from '@components/chat/ChatInput';
import { useState, useEffect, useRef } from 'react';
import { useNavigation } from '@react-navigation/native';
import { Alert } from 'react-native';
import { useAuth } from '@contexts/AuthContext';
import * as ImagePicker from 'expo-image-picker';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Client } from '@stomp/stompjs';
import SockJS from 'sockjs-client';
import { API_URL_WEBSOCKER, CHAT_GET_ID, CHAT_POST_ADD, CHAT_POST_PARAMS, GET_ALL, GET_TOKEN, GET_TOKEN_ID, USER_POST_UPLOAD } from 'api/apiService';
import axios from 'axios';
import * as Speech from 'expo-speech';
import { Audio } from 'expo-av';

const ChatScreen = () => {
    const navigation = useNavigation();
    const flatListRef = useRef(null);

    const [loading, setLoading] = useState(true);
    const [sending, setSending] = useState(false);
    const [conversation, setConversation] = useState(null);
    const [messages, setMessages] = useState([]);
    const [messageText, setMessageText] = useState('');
    const [selectedImage, setSelectedImage] = useState(null);
    const [selectedAudio, setSelectedAudio] = useState(null);
    const [conversationId, setConversationId] = useState(null);
    const [client, setClient] = useState(null);
    const [isChatbotEnabled, setIsChatbotEnabled] = useState(true);
    const [isRecordingAudio, setIsRecordingAudio] = useState(false);
    const [isTextToSpeechEnabled, setIsTextToSpeechEnabled] = useState(false);
    const { currentUser, token } = useAuth();

    useEffect(() => {
        if (!currentUser) {
            Alert.alert('L·ªói', 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng chat.');
            navigation.navigate('Login'); // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh ƒëƒÉng nh·∫≠p
            return;
        }
        fetchConversation();
        navigation.setOptions({ title: 'H·ªó tr·ª£ tr·ª±c tuy·∫øn' });

        Audio.requestPermissionsAsync().then(({ granted }) => {
            if (!granted) {
                Alert.alert('L·ªói', 'B·∫°n c·∫ßn c·∫•p quy·ªÅn truy c·∫≠p microphone ƒë·ªÉ ghi √¢m.');
            }
        });

        return () => {
            Speech.stop();
            if (isRecordingAudio && selectedAudio) {
                selectedAudio.stopAndUnloadAsync().catch((e) => console.error('Error unloading audio:', e));
            }
            Audio.setAudioModeAsync({ allowsRecordingIOS: false });
        };
    }, [currentUser, navigation]);

    useEffect(() => {
        if (!conversationId || !currentUser) return;
        {
            const socket = new SockJS(API_URL_WEBSOCKER);
            const stompClient = new Client({
                webSocketFactory: () => socket,
                reconnectDelay: 5000,
                heartbeatIncoming: 4000,
                heartbeatOutgoing: 4000,
                debug: (str) => console.log('[STOMP DEBUG]', str),
                onConnect: (frame) => {
                    console.log('‚úÖ Connected via SockJS!');
                    stompClient.subscribe(`/topic/conversation/${conversationId}`, (message) => {
                        const newMessage = JSON.parse(message.body);
                        if (newMessage.receiverId === currentUser.id) {
                            setMessages((prev) => {
                                if (!prev.some((msg) => msg.id === newMessage.id)) {
                                    console.log('üì• Tin nh·∫Øn nh·∫≠n t·ª´ server:', newMessage);
                                    return [...prev, newMessage];
                                }
                                return prev;
                            });
                        }
                        console.log('üì§ Tin nh·∫Øn ƒë√£ g·ª≠i:', newMessage);
                        console.log('üì• Tin nh·∫Øn nh·∫≠n t·ª´ server:', newMessage);
                        if (flatListRef.current) {
                            flatListRef.current.scrollToEnd({ animated: true });
                        }
                        if (newMessage.receiverId === currentUser?.id && !newMessage.read) {
                            handleMarkAsRead(newMessage);
                        }
                    });
                },
                onStompError: (frame) => {
                    console.error('STOMP Error:', frame);
                    Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ k·∫øt n·ªëi WebSocket. Vui l√≤ng th·ª≠ l·∫°i.');
                },
                onWebSocketError: (event) => {
                    console.error('‚ùå WebSocket Error:', event);
                },
            });

            stompClient.activate();
            setClient(stompClient);

            return () => {
                if (stompClient) {
                    stompClient.deactivate();
                }
            };
        }
    }, [conversationId, currentUser]);

    // Speak bot messages when added
    useEffect(() => {
        if (isTextToSpeechEnabled) {
            const lastMessage = messages[messages.length - 1];
            if (lastMessage && lastMessage.role === 'bot' && lastMessage.content) {
                Speech.stop(); // Stop previous speech to avoid overlap
                Speech.speak(lastMessage.content, {
                    language: 'vi-VN',
                    pitch: 1.0,
                    rate: 1.0,
                    onError: (error) => console.error('Speech error:', error),
                });
            }
        }
    }, [messages, isTextToSpeechEnabled]);

    const handleMarkAsRead = async (newMessage) => {
        if (newMessage.receiverId === currentUser?.id && !newMessage.read) {
            try {
                await CHAT_POST_PARAMS(`conversations/read/${conversationId}`, { userId: currentUser?.id });
            } catch (error) {
                console.error('‚ùå Failed to mark message as read:', error);
            }
        }
    };

    const fetchConversation = async (retryCount = 3) => {
        try {
            setLoading(true);
            const userId = currentUser?.id;
            const response = await CHAT_GET_ID('conversations/user', userId);
            if (response.status === 200) {
                setConversation(response.data?.data);
                setMessages(response.data?.data?.messages || []);
                setConversationId(response.data?.data?.id);
                if (response.data.data.unreadCount > 0) {
                    await CHAT_POST_PARAMS(`conversations/read/${conversationId}`, { userId: currentUser?.id });
                }
            } else {
                const createResponse = await createNewConversation(retryCount);
                if (createResponse.status === 200) {
                    setConversation(createResponse.data?.data);
                    setMessages(createResponse.data?.data?.messages);
                    setConversationId(createResponse.data?.data?.id);
                } else {
                    throw new Error('Kh√¥ng th·ªÉ t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi');
                }
            }
        } catch (error) {
            console.error('Error fetching conversation:', error);
        } finally {
            setLoading(false);
        }
    };

    const createNewConversation = async (retryCount = 3) => {
        const formData = {
            userId: currentUser?.id,
            userName: currentUser?.fullName,
            userAvatar: currentUser?.profileImageUrl,
        };
        try {
            const createResponse = await CHAT_POST_ADD('conversations', formData);
            if (createResponse.status === 200) {
                return createResponse;
            } else {
                throw new Error('API failed to create conversation');
            }
        } catch (error) {
            if (retryCount > 0) {
                console.log(`Retrying create conversation... (${retryCount} attempts left)`);
                await new Promise((resolve) => setTimeout(resolve, 2000));
                return createNewConversation(retryCount - 1);
            } else {
                throw error;
            }
        }
    };

    const containsKeyword = (input, keywords) => {
        return keywords.some((keyword) => input.includes(keyword));
    };

    const handleChatbotResponse = async (messageText) => {
        const lowerInput = messageText.toLowerCase();
        let responseContent = '';
        let productList = null;

        const getStatusText = (status) => {
            switch (status) {
                case "PENDING":
                    return "ƒêang x·ª≠ l√Ω";
                case "CONFIRMED":
                    return "ƒê√£ x√°c nh·∫≠n";
                case "SHIPPED":
                    return "ƒê√£ giao h√†ng";
                case "DELIVERED":
                    return "ƒê√£ giao th√†nh c√¥ng";
                case "CANCELLED":
                    return "ƒê√£ h·ªßy";
                default:
                    return "Kh√¥ng x√°c ƒë·ªãnh";
            }
        };

        try {
            const res = await GET_ALL('products/colors');
            if (res.status !== 200) {
                throw new Error('Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·∫£n ph·∫©m.');
            }

            const products = res.data.data.content;
            const greetingKeywords = ['ch√†o', 'hi', 'hello', 'xin ch√†o', 'ch√†o b·∫°n'];
            const productKeywords = ['b√°n g√¨', 's·∫£n ph·∫©m', 'mua g√¨', 'xem s·∫£n ph·∫©m', 'c√≥ h√†ng g√¨', 'c·ª≠a h√†ng'];
            const cheapestKeywords = ['r·∫ª nh·∫•t', 'gi√° th·∫•p nh·∫•t', 'gi√° r·∫ª', 'gi·∫£m gi√°'];
            const iphoneKeywords = ['iphone', 'mua iphone', 'iphone gi√° bao nhi√™u'];
            const colorKeywords = ['m√†u s·∫Øc', 'm√†u', 'c√≥ m√†u g√¨'];
            const storeKeywords = [
                'c·ª≠a h√†ng', 'minh tu·∫•n', 'minh tu·∫•n mobile', 'gi·ªõi thi·ªáu', 'li√™n h·ªá',
                'v·ªÅ ch√∫ng t√¥i', 'ƒë·ªãa ch·ªâ', 'hotline', 'email', 'website', 'm·∫°ng x√£ h·ªôi',
                't·∫ßm nh√¨n', 's·ª© m·ªánh', 'gi√° tr·ªã'
            ];
            const infoKeywords = ['rl', 'retrieve info', 'th√¥ng tin c√° nh√¢n', 'h·ªì s∆°', 'profile', 't√¥i l√† ai'];
            const orderKeywords = ['order', 'ƒë∆°n h√†ng', 'l·ªãch s·ª≠ ƒë∆°n h√†ng', 'my orders'];
            const orderDetailKeywords = ['chi ti·∫øt ƒë∆°n h√†ng', 'order detail', 'xem chi ti·∫øt'];

            if (containsKeyword(lowerInput, greetingKeywords)) {
                responseContent = 'üëã **Ch√†o b·∫°n!** T√¥i l√† bot chat c·ªßa **Minh Tu·∫•n Mobile**, chu·ªói b√°n l·∫ª ƒëi·ªán tho·∫°i, m√°y t√≠nh b·∫£ng, laptop v√† ph·ª• ki·ªán uy t√≠n t·∫°i Vi·ªát Nam. H·ªèi t√¥i v·ªÅ s·∫£n ph·∫©m, gi√° c·∫£, ho·∫∑c th√¥ng tin c·ª≠a h√†ng nh√©! üòä';
            } else if (containsKeyword(lowerInput, productKeywords)) {
                productList = products.slice(0, 3).map((p) => ({
                    id: p.colorId,
                    name: p.name,
                    imageUrl: p.image || 'https://via.placeholder.com/200',
                    color: p.color,
                    storage: p.storage,
                    price: p.price === 0 ? p.originalPrice : p.price,
                    discount: p.discount === 100 ? null : p.discount,
                    stock: p.stock,
                }));
                responseContent = 'C·ª≠a h√†ng ch√∫ng t√¥i b√°n c√°c s·∫£n ph·∫©m sau:\n\nB·∫°n mu·ªën xem th√™m chi ti·∫øt s·∫£n ph·∫©m n√†o?';
            } else if (containsKeyword(lowerInput, cheapestKeywords)) {
                const validProducts = products.filter((p) => p.price > 0).sort((a, b) => a.price - b.price);
                if (validProducts.length === 0) {
                    responseContent = 'Hi·ªán t·∫°i kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒëang gi·∫£m gi√°.';
                } else {
                    productList = validProducts.slice(0, 5).map((p) => ({
                        id: p.colorId,
                        name: p.name,
                        imageUrl: p.image || 'https://via.placeholder.com/200',
                        color: p.color,
                        storage: p.storage,
                        price: p.price,
                        discount: p.discount === 100 ? null : p.discount,
                        stock: p.stock,
                    }));
                    responseContent = 'Danh s√°ch s·∫£n ph·∫©m gi√° th·∫•p nh·∫•t:';
                }
            } else if (containsKeyword(lowerInput, iphoneKeywords)) {
                const iphones = products.filter((p) => p.name.toLowerCase().includes('iphone'));
                if (iphones.length === 0) {
                    responseContent = 'Hi·ªán t·∫°i kh√¥ng c√≥ iPhone n√†o trong danh s√°ch.';
                } else {
                    productList = iphones.map((p) => ({
                        id: p.colorId,
                        name: p.name,
                        imageUrl: p.image || 'https://via.placeholder.com/200',
                        color: p.color,
                        storage: p.storage,
                        price: p.price === 0 ? p.originalPrice : p.price,
                        discount: p.discount === 100 ? null : p.discount,
                        stock: p.stock,
                    }));
                    responseContent = 'Danh s√°ch iPhone hi·ªán c√≥:';
                }
            } else if (containsKeyword(lowerInput, colorKeywords)) {
                const colorList = products.map((p) => `üì± ${p.name} - **M√†u**: ${p.color}`).join('\n\n');
                responseContent = `Danh s√°ch s·∫£n ph·∫©m v√† m√†u s·∫Øc:\n\n${colorList}`;
            } else if (containsKeyword(lowerInput, storeKeywords)) {
                let storeResponse = ' **V·ªÅ Minh Tu·∫•n Mobile**\n\n';
                if (lowerInput.includes('gi·ªõi thi·ªáu') || lowerInput.includes('minh tu·∫•n') || lowerInput.includes('v·ªÅ ch√∫ng t√¥i')) {
                    storeResponse += 'Minh Tu·∫•n Mobile ƒë∆∞·ª£c th√†nh l·∫≠p v√†o nƒÉm 2010, l√† chu·ªói c·ª≠a h√†ng b√°n l·∫ª ƒëi·ªán tho·∫°i, m√°y t√≠nh b·∫£ng, laptop v√† ph·ª• ki·ªán uy t√≠n t·∫°i Vi·ªát Nam. V·ªõi h∆°n 50 c·ª≠a h√†ng tr√™n to√†n qu·ªëc, ch√∫ng t√¥i mang ƒë·∫øn s·∫£n ph·∫©m ch√≠nh h√£ng, gi√° c·∫£ c·∫°nh tranh v√† d·ªãch v·ª• t·∫≠n t√¢m.\n\n**Slogan**: Uy t√≠n t·∫°o n√™n th∆∞∆°ng hi·ªáu.';
                } else if (lowerInput.includes('li√™n h·ªá') || lowerInput.includes('ƒë·ªãa ch·ªâ') || lowerInput.includes('hotline') || lowerInput.includes('email') || lowerInput.includes('website')) {
                    storeResponse += 'Th√¥ng tin li√™n h·ªá:\n- **ƒê·ªãa ch·ªâ**: 123 ƒê∆∞·ªùng L√™ L·ª£i, Ph∆∞·ªùng B·∫øn Ngh√©, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh\n- **Hotline**: 1800.1234 (Mi·ªÖn ph√≠)\n- **Email**: info@minhtuanmobile.com\n- **Website**: www.minhtuanmobile.com';
                } else if (lowerInput.includes('m·∫°ng x√£ h·ªôi')) {
                    storeResponse += 'K·∫øt n·ªëi v·ªõi ch√∫ng t√¥i tr√™n m·∫°ng x√£ h·ªôi:\n- **Facebook**: https://facebook.com\n- **YouTube**: https://youtube.com\n- **Instagram**: https://instagram.com\n- **TikTok**: https://tiktok.com';
                } else if (lowerInput.includes('t·∫ßm nh√¨n') || lowerInput.includes('s·ª© m·ªánh')) {
                    storeResponse += '- **T·∫ßm nh√¨n**: Tr·ªü th√†nh nh√† b√°n l·∫ª c√¥ng ngh·ªá h√†ng ƒë·∫ßu Vi·ªát Nam, mang ƒë·∫øn tr·∫£i nghi·ªám mua s·∫Øm tuy·ªát v·ªùi.\n- **S·ª© m·ªánh**: Cung c·∫•p s·∫£n ph·∫©m ch√≠nh h√£ng v·ªõi gi√° t·ªët nh·∫•t, d·ªãch v·ª• chuy√™n nghi·ªáp v√† h·∫≠u m√£i chu ƒë√°o.';
                } else if (lowerInput.includes('gi√° tr·ªã')) {
                    storeResponse += 'Gi√° tr·ªã c·ªët l√µi:\n- **Uy t√≠n**: ƒê·∫∑t ch·∫•t l∆∞·ª£ng v√† ni·ªÅm tin l√™n h√†ng ƒë·∫ßu.\n- **Ch·∫•t l∆∞·ª£ng**: Cam k·∫øt s·∫£n ph·∫©m ch√≠nh h√£ng.\n- **T·∫≠n t√¢m**: Ph·ª•c v·ª• kh√°ch h√†ng v·ªõi s·ª± chu ƒë√°o.\n- **Ph√°t tri·ªÉn**: Kh√¥ng ng·ª´ng c·∫£i ti·∫øn ƒë·ªÉ ƒë√°p ·ª©ng nhu c·∫ßu.';
                } else {
                    storeResponse += 'Minh Tu·∫•n Mobile l√† chu·ªói b√°n l·∫ª uy t√≠n v·ªõi h∆°n 50 c·ª≠a h√†ng tr√™n to√†n qu·ªëc. H√£y h·ªèi th√™m v·ªÅ s·∫£n ph·∫©m, li√™n h·ªá, ho·∫∑c gi√° tr·ªã c·ªßa ch√∫ng t√¥i!';
                }
                responseContent = storeResponse;
            } else if (containsKeyword(lowerInput, infoKeywords)) {
                if (!token) {
                    responseContent = 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin c√° nh√¢n. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p qua m√†n h√¨nh ƒëƒÉng nh·∫≠p.';
                } else {
                    try {
                        const apiResponse = await GET_TOKEN("customer", token);
                        if (apiResponse.status === 200) {
                            const customerData = apiResponse.data.data;
                            responseContent = `**Th√¥ng tin c√° nh√¢n**:\n\n` +
                                `- **H·ªç t√™n**: ${customerData.fullName}\n` +
                                `- **Email**: ${customerData.email}\n` +
                                `- **S·ªë ƒëi·ªán tho·∫°i**: ${customerData.phone}\n` +
                                `- **·∫¢nh h·ªì s∆°**: ${customerData.profileImageUrl}\n` +
                                `- **Vai tr√≤**: ${customerData.role}\n` +
                                `- **Tr·∫°ng th√°i**: ${customerData.status}\n` +
                                `- **Gi·ªõi t√≠nh**: ${customerData.gender}\n` +
                                `- **Ng√†y sinh**: ${new Date(customerData.birthday).toLocaleDateString('vi-VN')}\n` +
                                `- **L·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi**: ${new Date(customerData.lastLoginDate).toLocaleString('vi-VN')}\n` +
                                `- **Ng√†y t·∫°o**: ${new Date(customerData.createdAt).toLocaleString('vi-VN')}\n\n` +
                                `**ƒê·ªãa ch·ªâ**:\n` +
                                customerData.addresses.map((addr, index) =>
                                    `- **ƒê·ªãa ch·ªâ ${index + 1}**: ${addr.addressDetail}, ${addr.district}, ${addr.city}\n  **T√™n ng∆∞·ªùi nh·∫≠n**: ${addr.fullName}\n  **S·ªë ƒëi·ªán tho·∫°i**: ${addr.phone}\n  **Tr·∫°ng th√°i**: ${addr.active ? 'ƒêang s·ª≠ d·ª•ng' : 'Kh√¥ng s·ª≠ d·ª•ng'}\n`
                                ).join('\n');
                        } else {
                            responseContent = 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin c√° nh√¢n. Vui l√≤ng th·ª≠ l·∫°i sau.';
                        }
                    } catch (error) {
                        console.error('Error fetching customer info:', error);
                        responseContent = 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin c√° nh√¢n. Vui l√≤ng ki·ªÉm tra l·∫°i ƒëƒÉng nh·∫≠p ho·∫∑c th·ª≠ l·∫°i sau.';
                    }
                }
            } else if (containsKeyword(lowerInput, orderKeywords)) {
                if (!token) {
                    responseContent = 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem l·ªãch s·ª≠ ƒë∆°n h√†ng. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p qua m√†n h√¨nh ƒëƒÉng nh·∫≠p.';
                } else {
                    try {
                        const response = await GET_TOKEN("user/my-orders", token);
                        if (response.status === 200) {
                            const orders = response.data.data;
                            if (orders.length === 0) {
                                responseContent = 'B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.';
                            } else {
                                responseContent = '**L·ªãch s·ª≠ ƒë∆°n h√†ng**:\n\n';
                                orders.forEach((order, index) => {
                                    responseContent += `- **ƒê∆°n h√†ng ${index + 1}** (M√£: ${order.orderCode})\n` +
                                        `  **Tr·∫°ng th√°i**: ${getStatusText(order.orderStatus)}\n` +
                                        `  **T·ªïng ti·ªÅn**: ${order.total.toLocaleString('vi-VN')} VND\n` +
                                        `  **Ng√†y ƒë·∫∑t**: ${new Date(order.createdAt).toLocaleString('vi-VN')}\n` +
                                        `  **S·∫£n ph·∫©m**: ${order.items.map(item => `${item.name} (${item.quantity} x ${item.price.toLocaleString('vi-VN')} VND)`).join(', ')}\n\n`;
                                });
                                responseContent += 'ƒê·ªÉ xem chi ti·∫øt ƒë∆°n h√†ng, h√£y cung c·∫•p m√£ ƒë∆°n h√†ng (v√≠ d·ª•: "chi ti·∫øt ƒë∆°n h√†ng MT.8862D6").';
                            }
                        } else {
                            responseContent = 'Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.';
                        }
                    } catch (error) {
                        console.error('Error fetching orders:', error);
                        responseContent = 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y l·ªãch s·ª≠ ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.';
                    }
                }
            } else if (containsKeyword(lowerInput, orderDetailKeywords)) {
                if (!token) {
                    responseContent = 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem chi ti·∫øt ƒë∆°n h√†ng. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p qua m√†n h√¨nh ƒëƒÉng nh·∫≠p.';
                } else {
                    const orderCodeMatch = lowerInput.match(/mt\.[a-z0-9]+/i);
                    const orderCode = orderCodeMatch ? orderCodeMatch[0].toUpperCase() : null;
                    if (!orderCode) {
                        responseContent = 'Vui l√≤ng cung c·∫•p m√£ ƒë∆°n h√†ng ƒë·ªÉ xem chi ti·∫øt (v√≠ d·ª•: "chi ti·∫øt ƒë∆°n h√†ng MT.8862D6").';
                    } else {
                        try {
                            const ordersResponse = await GET_TOKEN("user/my-orders", token);
                            if (ordersResponse.status !== 200) {
                                responseContent = 'Kh√¥ng th·ªÉ t√¨m ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.';
                                throw new Error('Failed to fetch orders');
                            }

                            const orders = ordersResponse.data.data;
                            const targetOrder = orders.find(order => order.orderCode === orderCode);

                            if (!targetOrder) {
                                responseContent = `Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi m√£ ${orderCode}. Vui l√≤ng ki·ªÉm tra l·∫°i m√£ ƒë∆°n h√†ng.`;
                            } else {
                                const orderResponse = await GET_TOKEN_ID("user/orders", targetOrder.id, token);
                                if (orderResponse.status === 200) {
                                    const order = orderResponse.data.data;
                                    responseContent = `**Chi ti·∫øt ƒë∆°n h√†ng ${order.orderCode}**:\n\n` +
                                        `**Tr·∫°ng th√°i**: ${getStatusText(order.orderStatus)}\n` +
                                        `**Ng√†y ƒë·∫∑t**: ${new Date(order.createdAt).toLocaleString('vi-VN')}\n` +
                                        `**Ng√†y c·∫≠p nh·∫≠t**: ${new Date(order.updatedAt).toLocaleString('vi-VN')}\n\n` +
                                        `**S·∫£n ph·∫©m**:\n` +
                                        order.items.map((item, index) =>
                                            `- ${item.name} (${item.color || ''} ${item.storage || ''})\n` +
                                            `  S·ªë l∆∞·ª£ng: ${item.quantity}\n` +
                                            `  Gi√°: ${item.price.toLocaleString('vi-VN')} VND\n` +
                                            `  H√¨nh ·∫£nh: ${item.imageUrl}\n`
                                        ).join('\n') + '\n' +
                                        `**Th√¥ng tin giao h√†ng**:\n` +
                                        `- T√™n ng∆∞·ªùi nh·∫≠n: ${order.shipping.fullName}\n` +
                                        `- S·ªë ƒëi·ªán tho·∫°i: ${order.shipping.phone}\n` +
                                        `- ƒê·ªãa ch·ªâ: ${order.shipping.addressDetail}\n` +
                                        `- Ph∆∞∆°ng th·ª©c: ${order.shipping.method}\n` +
                                        `- Ph√≠ v·∫≠n chuy·ªÉn: ${order.shipping.fee.toLocaleString('vi-VN')} VND\n\n` +
                                        `**Th√¥ng tin thanh to√°n**:\n` +
                                        `- Ph∆∞∆°ng th·ª©c: ${order.payment.method}\n` +
                                        `- Tr·∫°ng th√°i: ${order.payment.status}\n\n` +
                                        `**T√≥m t·∫Øt ƒë∆°n h√†ng**:\n` +
                                        `- Gi·∫£m gi√°: ${order.discount.toLocaleString('vi-VN')} VND\n` +
                                        `- T·ªïng ti·ªÅn: ${order.total.toLocaleString('vi-VN')} VND\n` +
                                        `- Ghi ch√∫: ${order.note || 'Kh√¥ng c√≥'}\n`;
                                } else {
                                    responseContent = `Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt ƒë∆°n h√†ng ${orderCode}. Vui l√≤ng th·ª≠ l·∫°i sau.`;
                                }
                            }
                        } catch (error) {
                            console.error('Error fetching order details:', error);
                            responseContent = 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.';
                        }
                    }
                }
            } else {
                const res = await axios.post(
                    'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyCwEv75jMbsy6XkAeAivJWu0XqnpxtoALc',
                    { contents: [{ parts: [{ text: messageText }] }] },
                    { headers: { 'Content-Type': 'application/json' } }
                );
                responseContent = res.data.candidates?.[0]?.content?.parts?.[0]?.text || 'Kh√¥ng c√≥ ph·∫£n h·ªìi.';
            }
        } catch (error) {
            console.error('Chatbot error:', error);
            responseContent = 'ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }

        setMessages((prev) => [
            ...prev,
            {
                role: 'bot',
                content: responseContent,
                products: productList,
                id: `bot_${Date.now()}`,
            },
        ]);
    };

    // Audio recording with expo-av
    const startAudioRecording = async () => {
        try {
            // Ki·ªÉm tra n·∫øu ƒëang ghi √¢m
            if (isRecordingAudio || selectedAudio) {
                console.log('ƒêang ghi √¢m ho·∫∑c c√≥ b·∫£n ghi √¢m ch∆∞a ƒë∆∞·ª£c gi·∫£i ph√≥ng.');
                return;
            }

            const { granted } = await Audio.requestPermissionsAsync();
            if (!granted) {
                Alert.alert('L·ªói', 'B·∫°n c·∫ßn c·∫•p quy·ªÅn truy c·∫≠p microphone ƒë·ªÉ ghi √¢m.');
                return;
            }

            await Audio.setAudioModeAsync({
                allowsRecordingIOS: true,
                playsInSilentModeIOS: true,
            });

            const { recording } = await Audio.Recording.createAsync(
                Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY
            );
            setIsRecordingAudio(true);
            setSelectedAudio(recording); // L∆∞u ƒë·ªëi t∆∞·ª£ng ghi √¢m
        } catch (e) {
            console.error('Error starting audio recording:', e);
            Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu ghi √¢m. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    const stopAudioRecording = async () => {
        try {
            if (selectedAudio && isRecordingAudio) {
                await selectedAudio.stopAndUnloadAsync();
                const uri = selectedAudio.getURI();
                setSelectedAudio(uri); // L∆∞u URI c·ªßa b·∫£n ghi
                setIsRecordingAudio(false);
            } else {
                console.log('Kh√¥ng c√≥ b·∫£n ghi √¢m n√†o ƒë·ªÉ d·ª´ng.');
            }
        } catch (e) {
            console.error('Error stopping audio recording:', e);
            Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ d·ª´ng ghi √¢m. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            // ƒê·∫£m b·∫£o tr·∫°ng th√°i ƒë∆∞·ª£c ƒë·∫∑t l·∫°i
            setIsRecordingAudio(false);
        }
    };
    const handleSendMessage = async () => {
        if (!currentUser || !conversationId) {
            Alert.alert('Th√¥ng b√°o', 'Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn v√¨ th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c cu·ªôc tr√≤ chuy·ªán kh√¥ng h·ª£p l·ªá.');
            return;
        }
        if ((!messageText.trim() && !selectedImage && !selectedAudio) || sending) return;
        if (selectedAudio) {
            console.log("asssss", selectedAudio);
            return;
        }

        try {
            setSending(true);
            let uploadedImageUrl = null;
            let uploadedAudioUrl = null;

            if (selectedImage) {
                const shortText = messageText.substring(0, 10);
                const formData = new FormData();
                formData.append('file', {
                    uri: selectedImage,
                    name: `chat_${shortText}.jpg`,
                    type: 'image/jpeg',
                });

                const uploadResponse = await USER_POST_UPLOAD('public/chat/upload-image', formData, {
                    headers: { 'Content-Type': 'multipart/form-data' },
                });

                if (uploadResponse.status === 200) {
                    uploadedImageUrl = uploadResponse.data.data.data;
                } else {
                    throw new Error('Failed to upload image');
                }
            }

            if (selectedAudio && typeof selectedAudio === 'string') {
                const formData = new FormData();
                formData.append('file', {
                    uri: selectedAudio,
                    name: `chat_audio_${Date.now()}.m4a`,
                    type: 'audio/m4a',
                });

                const uploadResponse = await USER_POST_UPLOAD('public/chat/upload-audio', formData, {
                    headers: { 'Content-Type': 'multipart/form-data' },
                });

                if (uploadResponse.status === 200) {
                    uploadedAudioUrl = uploadResponse.data.data.data;
                } else {
                    throw new Error('Kh√¥ng th·ªÉ t·∫£i l√™n √¢m thanh');
                }
            }
            const newUserMessage = {
                senderId: currentUser?.id,
                receiverId: isChatbotEnabled ? 'BOT' : 'ADMIN',
                content: messageText.trim(),
                timestamp: new Date().toISOString(),
                read: false,
                image: uploadedImageUrl,
                audio: uploadedAudioUrl,
                id: `temp_${Date.now()}`,
            };

            setMessages((prev) => [...prev, newUserMessage]);
            setMessageText('');
            setSelectedImage(null);
            setSelectedAudio(null);

            if (flatListRef.current) {
                flatListRef.current.scrollToEnd({ animated: true });
            }

            if (isChatbotEnabled) {
                await handleChatbotResponse(messageText);
            } else {
                if (client && client.connected) {
                    client.publish({
                        destination: `/app/chat/${conversationId}`,
                        body: JSON.stringify({
                            senderId: currentUser?.id,
                            receiverId: 'ADMIN',
                            content: messageText.trim(),
                            timestamp: null,
                            read: false,
                            image: uploadedImageUrl,
                            audio: uploadedAudioUrl,
                        }),
                    });
                } else {
                    const response = await CHAT_POST_ADD(`conversations/messages/${conversationId}`, {
                        senderId: currentUser?.id,
                        receiverId: 'ADMIN',
                        content: messageText.trim(),
                        timestamp: null,
                        read: false,
                        image: uploadedImageUrl,
                        audio: uploadedAudioUrl,
                    });
                    if (response.status === 200) {
                        setMessages((prev) => {
                            const updated = prev.filter((msg) => !msg.id.startsWith('temp_'));
                            return [...updated, response.data.data];
                        });
                    } else {
                        throw new Error('Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn');
                    }
                }
            }
        } catch (error) {
            console.error('Error sending message:', error);
            Alert.alert('L·ªói', 'ƒê√£ x·∫£y ra l·ªói khi g·ª≠i tin nh·∫Øn');
        } finally {
            setSending(false);
            setIsRecordingAudio(false); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i ghi √¢m n·∫øu c√≥ l·ªói
        }
    };

    const toggleChatMode = () => {
        setIsChatbotEnabled(!isChatbotEnabled);
        setMessages((prev) => [
            ...prev,
            {
                role: 'system',
                content: isChatbotEnabled ? 'ƒê√£ chuy·ªÉn sang h·ªó tr·ª£ nh√¢n vi√™n.' : 'ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô chatbot.',
                id: `system_${Date.now()}`,
            },
        ]);
    };

    const toggleTextToSpeech = () => {
        setIsTextToSpeechEnabled(!isTextToSpeechEnabled);
        if (isTextToSpeechEnabled) {
            Speech.stop();
        }
        setMessages((prev) => [
            ...prev,
            {
                role: 'system',
                content: isTextToSpeechEnabled ? 'ƒê√£ t·∫Øt ƒë·ªçc tin nh·∫Øn.' : 'ƒê√£ b·∫≠t ƒë·ªçc tin nh·∫Øn.',
                id: `system_${Date.now()}`,
            },
        ]);
    };

    const pickImage = async () => {
        Alert.alert(
            'Ch·ªçn h√¨nh ·∫£nh',
            'B·∫°n mu·ªën ch·ª•p ·∫£nh m·ªõi hay ch·ªçn t·ª´ th∆∞ vi·ªán?',
            [
                {
                    text: 'Ch·ª•p ·∫£nh',
                    onPress: async () => {
                        try {
                            const cameraPermission = await ImagePicker.requestCameraPermissionsAsync();
                            if (!cameraPermission.granted) {
                                Alert.alert('L·ªói', 'B·∫°n c·∫ßn c·∫•p quy·ªÅn truy c·∫≠p camera ƒë·ªÉ ch·ª•p ·∫£nh.');
                                return;
                            }

                            const result = await ImagePicker.launchCameraAsync({
                                mediaTypes: ImagePicker.MediaTypeOptions.Images,
                                allowsEditing: true,
                                quality: 0.8,
                                allowsEditing: false,
                            });

                            if (!result.canceled) {
                                setSelectedImage(result.assets[0].uri);
                            }
                        } catch (error) {
                            console.error('Error capturing photo:', error);
                            Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ ch·ª•p ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.');
                        }
                    },
                },
                {
                    text: 'Ch·ªçn t·ª´ th∆∞ vi·ªán',
                    onPress: async () => {
                        try {
                            const libraryPermission = await ImagePicker.requestMediaLibraryPermissionsAsync();
                            if (!libraryPermission.granted) {
                                Alert.alert('L·ªói', 'B·∫°n c·∫ßn c·∫•p quy·ªÅn truy c·∫≠p th∆∞ vi·ªán ·∫£nh.');
                                return;
                            }

                            const result = await ImagePicker.launchImageLibraryAsync({
                                mediaTypes: ImagePicker.MediaTypeOptions.Images,
                                allowsEditing: true,
                                quality: 0.8,
                                allowsEditing: false,
                            });

                            if (!result.canceled) {
                                setSelectedImage(result.assets[0].uri);
                            }
                        } catch (error) {
                            console.error('Error selecting image:', error);
                            Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ ch·ªçn h√¨nh ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.');
                        }
                    },
                },
                { text: 'H·ªßy', style: 'cancel' },
            ],
            { cancelable: true }
        );
    };

    if (loading) {
        return (
            <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color="#e30019" />
                <Text style={styles.loadingText}>ƒêang t·∫£i cu·ªôc tr√≤ chuy·ªán...</Text>
            </View>
        );
    }

    return (
        <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>
            <SafeAreaView style={styles.container}>
                <ChatHeader navigation={navigation} />
                <ChatMessages messages={messages} flatListRef={flatListRef} currentUser={currentUser} />
                <ChatInput
                    messageText={messageText}
                    setMessageText={setMessageText}
                    selectedImage={selectedImage}
                    setSelectedImage={setSelectedImage}
                    selectedAudio={selectedAudio}
                    setSelectedAudio={setSelectedAudio}
                    sending={sending}
                    handleSendMessage={handleSendMessage}
                    pickImage={pickImage}
                    startAudioRecording={startAudioRecording}
                    stopAudioRecording={stopAudioRecording}
                    isRecordingAudio={isRecordingAudio}
                    toggleChatMode={toggleChatMode}
                    toggleTextToSpeech={toggleTextToSpeech}
                    isChatbotEnabled={isChatbotEnabled}
                    isTextToSpeechEnabled={isTextToSpeechEnabled}
                />
            </SafeAreaView>
        </KeyboardAvoidingView>
    );
};

export default ChatScreen;

